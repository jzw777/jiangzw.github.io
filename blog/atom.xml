<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jzw777.github.io/blog</id>
    <title>姜米尔的技术分享小站 Blog</title>
    <updated>2023-03-02T10:08:12.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jzw777.github.io/blog"/>
    <subtitle>姜米尔的技术分享小站 Blog</subtitle>
    <icon>https://jzw777.github.io/img/my.ico</icon>
    <rights>Copyright © 2023 Mill.</rights>
    <entry>
        <title type="html"><![CDATA[拦截器]]></title>
        <id>https://jzw777.github.io/blog/intercept</id>
        <link href="https://jzw777.github.io/blog/intercept"/>
        <updated>2023-03-02T10:08:12.000Z</updated>
        <summary type="html"><![CDATA[A generic interceptor can intercept runtime events that occur within a base program.]]></summary>
        <content type="html"><![CDATA[<p>​	最近在使用<code>seata</code>的过程中，遇到了一些问题，而问题主要集中在拦截器上，解决了问题后，对拦截器做一个简单的归纳总结。
​	<img loading="lazy" src="https://test.preview.qingxinzhimei.com/2023/03/18/ERP202303180000002996.png" alt="img" class="img_ev3q">
​	提到拦截器，就不得不提过滤器。如图所示，过滤器<code>Filter</code>是在请求进入容器后，但在进入<code>servlet</code>之前进行预处理，请求结束是在<code>Servlet</code>处理完以后。拦截器 <code>Interceptor</code> 是在请求进入<code>Servlet</code>后，在进入<code>Controller</code> 之前进行预处理的，<code>Controller</code> 中渲染了对应的视图之后请求结束。所以，从执行顺序的角度看，过滤器一定是在拦截器之前。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="filter">Filter<a href="#filter" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>​	过滤器全路径是<code>javax.servlet.Filter</code>，是java在<code>Servlet</code>包中提供的一个接口。过滤器是一个对象，它对资源请求（Servlet 或静态内容）或资源响应或两者执行过滤任务。过滤器在 <code>doFilter</code> 方法中执行过滤。 每个 Filter 都可以访问一个 <code>FilterConfig</code> 对象，从中它可以获取其初始化参数，以及对它可以使用的 <code>ServletContext </code>的引用，例如，加载过滤任务所需的资源。</p><p>核心方法：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void doFilter(ServletRequest request, ServletResponse response,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                     FilterChain chain)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        throws IOException, ServletException;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-tip alert alert--success admonition_WoCw"><div class="admonitionHeading_TMsN"><span class="admonitionIcon_Ibzs"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>过滤器常用的示例有：</div><div class="admonitionContent_vXIg"><p> 身份验证过滤器、日志记录和审计过滤器、图像转换滤镜、数据压缩过滤器、加密过滤器、分词过滤器、触发资源访问事件的过滤器、Mime型链式过滤器</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="interceptor">Interceptor<a href="#interceptor" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>拦截器是aop的一种实现方案，是AOP思想的体现。在我们调用方法之前，调用拦截器的一个方法或者在调用方法之后，调用拦截器的一个方法。</p><p>这里有两个核心拦截器<code>HandlerInterceptor</code> 和 <code>MethodInterceptor</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="handlerinterceptor">HandlerInterceptor<a href="#handlerinterceptor" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>是<code>SpringMVC</code>对拦截器的实现。应用程序可以为某些处理程序组注册任意数量的现有或自定义拦截器，以添加通用的预处理行为，而无需修改每个处理程序的实现。从功能上看与Filter非常相似，但是借助<code>InterceptorRegistration</code>中的 <code>includePatterns</code> ，<code>excludePatterns</code>，<code>pathMatcher</code>，拦截器可以更细粒度的处理特定事情，尤其是分解出的通用处理程序代码和授权检查。</p><p>核心方法：</p><ul><li>preHandle：在业务处理器处理请求之前被调用。预处理，可以进行编码、安全控制、权限校验等处理；</li><li>postHandle：在业务处理器处理请求执行完成后，生成视图之前执行。后处理（调用了Service并返回ModelAndView，但未进行页面渲染），有机会修改ModelAndView （这个博主就基本不怎么用了）；</li><li>afterCompletion：在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。返回处理（已经渲染了页面）；</li></ul><p>实际开发中通过实现<code>HandlerInterceptor</code> 并重写上面三个方法来实现自定义拦截器。然后，借助<code>WebMvcConfigurer#addInterceptors(InterceptorRegistry registry)</code> 激活。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="methodinterceptor">MethodInterceptor<a href="#methodinterceptor" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p> <code>MethodInterceptor</code>是AOP项目中的拦截器，它拦截的目标是方法，即使不是<code>controller</code>中的方法。实现<code>MethodInterceptor</code>拦截器大致也分为两种，一种是实现<code>MethodInterceptor</code>接口，另一种利用AspectJ的注解或配置。</p><p>实现<code>MethodInterceptor</code>完成自定义拦截器。借助<code>DefaultPointcutAdvisor</code>使用。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">@Bean</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public DefaultPointcutAdvisor defaultPointcutAdvisor() {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    MethodInterceptor interceptor = new MyInterceptor();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    // AnnotationMatchingPointcut pointcut = new AnnotationMatchingPointcut(HfiTrace.class, true);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    JdkRegexpMethodPointcut pointcut = new JdkRegexpMethodPointcut();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    pointcut.setPatterns("com.aym.*");</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    // 配置增强类advisor</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    DefaultPointcutAdvisor advisor = new DefaultPointcutAdvisor();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    advisor.setPointcut(pointcut);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    advisor.setAdvice(interceptor);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    return advisor;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里多说几句，聊一下aop的实现原理。</p><p><img loading="lazy" src="https://test.preview.qingxinzhimei.com/2023/03/18/ERP202303180000003913.jpg" alt="img" class="img_ev3q"></p><p>​	一路向上找，自己实现的<code>MethodInterceptor</code>，最终是通过<code>BeanPostProcessor</code>的后置处理器(postProcessAfterInitialization)生成的具有增强的代理对象。下面是<code>AbstractAutoProxyCreator</code>的继承关系图：<img loading="lazy" src="https://test.preview.qingxinzhimei.com/2023/03/18/ERP202303180000005800.png" alt="img" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="requestinterceptor">RequestInterceptor<a href="#requestinterceptor" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	除了上面比较常用的拦截器，<code>SpringCloud</code>中<code>Feign</code>组件中定义了<code>RequestInterceptor</code>。在微服务体系中，存在大量的服务间调用，Feign帮助这些远程调用像本地调用一样方便，这个过程中除了正常传递入参及响应结果，同时需要传递一些通用信息，如token，多租户场景的<code>tenantId</code>，分布式事务中的全局事务ID。这些信息的传递就可以通过自定义<code>RequestInterceptor</code>来实现。<code>Feign</code>中就提供如<code>BasicAuthRequestInterceptor</code>和<code>OAuth2AccessTokenInterceptor</code>等拦截器，对服务间调用过程中，向<code>Header</code>中添加了一些通用数据。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="filter和interceptor的区别总结">filter和interceptor的区别总结<a href="#filter和interceptor的区别总结" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li><code>Filter</code>接口在<code>javax.servlet</code>包下面。<code>Interceptor</code>定义在<code>org.springframework.web.servlet</code>中。</li><li><code>Filter</code>是<code>Servlet</code>规定的，<code>Interceptor</code>即可用于<code>Web</code>程序，也可用于<code>Application</code>中。</li><li><code>Filter</code>是<code>Servlet</code>容器支持的，<code>Interceptor</code>是<code>Spring</code>框架支持的。</li><li><code>Filter</code>通过<code>dochain</code>放行，<code>Interceptor</code>通过<code>prehandler</code>放行。</li><li><code>Filter</code>只在方法前后执行，<code>Interceptor</code>粒度更细，可以深入到方法前后，异常抛出前后。</li></ol><br><div class="font-montserrat"><span class="font-bold">Tags: </span><div class="inline-flex flex-wrap gap-2"><a class="no-underline" href="/blog/tags/intercept"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">intercept</span></a><a class="no-underline" href="/blog/tags/aop"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">aop</span></a></div></div>]]></content>
        <author>
            <name>Mill Jiang</name>
            <uri>https://github.com/jzw777</uri>
        </author>
        <category label="intercept" term="intercept"/>
        <category label="aop" term="aop"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[证书]]></title>
        <id>https://jzw777.github.io/blog/certificate-authority</id>
        <link href="https://jzw777.github.io/blog/certificate-authority"/>
        <updated>2023-02-02T15:28:14.000Z</updated>
        <summary type="html"><![CDATA[https的使用越来越广泛，甚至微信开发已经不支持http的接口了，而https请求必须要配证书。]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="相关">相关<a href="#相关" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="加密">加密<a href="#加密" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	首先需要简单介绍一下密码学中对称加密和非对称加密这两个概念。</p><blockquote><p>对称加密：采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。</p><p>非对称加密：非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。公开密钥与私有密钥是一对，用公开密钥对数据进行加密，用对应的私有密钥才能解密。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ssltls">SSL/TLS<a href="#ssltls" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>SSL(Secure Socket Layer)安全套接层是Netscape公司率先采用的网络安全协议。它是在传输通信协议(TCP/IP)上实现的一种安全协议，采用公开密钥技术。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。</p><p>TLS(Transport Layer Security)传输层安全协议，用于两个应用程序之间提供保密性和数据完整性。</p><p>SSL协议实际上在1999年就开始被淘汰了。他已经被更新，更安全的TLS协议所取代。但由于习惯问题，我们还是叫”SSL”比较多。</p><p>对于应用程序，SSL/TLS是通常在传输层封装具体的协议，如HTTP(超文本传输协议)，SMTP(简单邮件传输协议)，NNTP(网络新闻传输协议)，FTP(文件传输的基础上实现的协议)，XMPP(可扩展消息和存在协议)和TCP(传输控制协议)。而我们接触最多的就是HTTP升级到HTTPS，http协议默认情况下是不加密内容的，这样就很可能在内容传播的时候被别人监听到，对于安全性要求较高的场合，必须要加密，https就是带加密的http协议，而https的加密是基于SSL的，它执行的是一个比较下层的加密，也就是说，在加密前，你的服务器程序在干嘛，加密后也一样在干嘛，不用动，这个加密对用户和开发者来说都是透明的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ssl证书">SSL证书<a href="#ssl证书" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>上面提到的，是基于TLS协议实现的数字证书。由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。SSL证书通过在客户端浏览器和Web服务器之间建立一条安全通道，实现数据信息在客户端和服务器之间的加密传输，可以防止数据信息的泄露，保证了双方传递信息的安全性，而且用户可以通过服务器证书验证他所访问的网站是否是真实可靠。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">server </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        listen       </span><span class="token number" style="color:rgb(247, 140, 108)">443</span><span class="token plain"> ssl</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        server_name  www.zhangsan.com</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        location / </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            proxy_pass http://server</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ssl_certificate     /etc/nginx/cert/server.pem</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ssl_certificate_key     /etc/nginx/cert/server.key</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ssl_session_timeout 5m</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">NULL:</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">aNULL:</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">MD5:</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">ADH:</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">RC4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">#表示使用的TLS协议的类型。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ssl_prefer_server_ciphers on</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面是一段nginx的https的代理配置示例，要实现https访问，需要配置证书。例如，我们可以从阿里云上申请免费的ssl证书，下载下来，包括两个文件，一个是pem文件，一个是key文件。其中pem存的是证书，key 存的是私钥。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="证书分类">证书分类<a href="#证书分类" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>DV 证书（Domain Validation）、OV 证书（Organization Validation） 、 EV 证书（Extended Validation）</p><table><thead><tr><th align="left">证书类型</th><th align="left">适用网站类型</th><th align="left">公信等级</th><th align="left">认证强度</th><th align="left">安全性</th><th align="left">支持的证书品牌</th></tr></thead><tbody><tr><td align="left">DV</td><td align="left">个人网站</td><td align="left">一般</td><td align="left">CA机构审核个人网站真实性、不验证企业真实性</td><td align="left">一般</td><td align="left">DigiCert（原Symantec）GeoTrustGlobalSignvTrus（国产）WoSign（国产）</td></tr><tr><td align="left">OV</td><td align="left">政府组织、企业、教育机构等</td><td align="left">高</td><td align="left">CA机构审核组织及企业真实性</td><td align="left">高</td><td align="left">DigiCert（原Symantec）GeoTrustGlobalSignvTrus（国产）CFCA（国产）</td></tr><tr><td align="left">EV</td><td align="left">大型企业、金融机构等</td><td align="left">最高</td><td align="left">严格认证</td><td align="left">最高</td><td align="left">DigiCert（原Symantec）GeoTrustCFCA（国产）</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="证书内容">证书内容<a href="#证书内容" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>同样的 X.509 证书，可能有不同的编码格式，目前有以下两种编码格式。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1pem---privacy-enhanced-mail">1.<strong>PEM</strong> - Privacy Enhanced Mail<a href="#1pem---privacy-enhanced-mail" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>打开看文本格式，以“-----BEGIN...”开头，“-----END...”结尾，可能会有多个，组成证书链路，内容是 BASE64 编码</p><p>使用如下命令解析证书，<code>a.pem</code> 为证书名称</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">openssl x509 -in a.pem -text  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我手上的一个证书查看内容如下：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token key atrule">Certificate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">Data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">Version</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 3 (0x2)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">Serial Number</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            0a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">05</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">9b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">25</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">f5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">4b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">3d</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">87</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">94</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">cc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">66</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">31</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">47</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">75</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">38</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">a3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">Signature Algorithm</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> sha256WithRSAEncryption</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># 证书颁发机构</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">Issuer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> C=US</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> O=DigiCert Inc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> OU=www.digicert.com</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> CN=DigiCert Global Root CA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># 证书的有效期</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        Validity</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">Not Before</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> May  4 00</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">00</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">00 2022 GMT</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">Not After</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> Nov  9 23</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">59</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">59 2031 GMT</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># 证书申请信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">Subject</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> C=US</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> O=DigiCert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> Inc.</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> CN=RapidSSL Global TLS RSA4096 SHA256 2022 CA1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># 公钥</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">Subject Public Key Info</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">Public Key Algorithm</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> rsaEncryption</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">RSA Public-Key</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> (4096 bit)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Modulus</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">00:a6:39:3c:98:70:09:7d:94:c8:16:f5:9d:e9:6e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">f4:03:de:9f:9d:c3:e7:e0:b8:d1:3f:81:39:97:d2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">15:a0:74:bf:45:89:33:70:46:32:cb:a2:1d:95:f6</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">20:7b:70:9e:35:21:2c:bd:b9:77:cb:60:2c:04:9a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">50:d1:c2:04:d2:8a:52:55:06:45:71:b3:b6:e0:c8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">79:76:f8:f1:de:b8:93:b1:a4:ee:ee:e6:31:14:ab</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">8f:ec:ae:2d:25:8e:2a:72:ba:38:62:9e:f7:eb:3a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">a1:a5:48:8c:75:d8:f9:05:fc:a7:62:36:4b:7b:9e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">c3:46:d6:dc:11:69:91:e0:2b:2c:10:94:db:98:aa</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">79:aa:0b:10:e1:88:6b:4f:43:56:88:dd:de:a7:3f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">44:aa:ab:e0:fd:75:d7:bd:d1:fb:b5:1b:d3:96:18</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">86:e2:1c:4a:ff:1e:d1:de:ea:37:5b:0e:d7:e9:5f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">a0:d3:15:7d:5f:56:72:a3:c0:06:63:9a:b0:d2:7e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">a2:5d:21:00:2d:8f:4e:04:4b:cb:f5:59:a3:52:f4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">1d:13:2b:ea:3f:1c:6d:1e:ea:d2:72:b0:75:b9:f8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">02:bf:99:32:00:a0:09:c1:bd:cc:23:05:b2:e5:d8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">97:fa:ea:a1:b8:b2:57:ef:14:df:b7:43:49:c0:1e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">6d:94:c8:17:fc:4f:12:f1:dc:98:68:b7:c7:11:fa</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">83:e7:53:0a:37:ad:3a:32:71:f2:c7:57:50:72:97</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">19:70:bd:91:ad:f7:ab:b1:33:40:86:25:64:84:85</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">ec:49:1b:4f:97:59:1e:c3:b6:0c:e3:15:2c:17:4f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">d4:dd:68:52:9d:3f:d5:fe:9f:73:cb:93:0d:db:84</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">2e:82:81:47:34:d3:67:a3:8e:05:51:de:67:21:59</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">30:c7:62:ea:d0:39:b3:f8:f1:99:be:f8:96:a1:f5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">fa:34:3a:9d:35:36:fc:c9:9a:84:63:71:52:e2:69</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">ca:15:07:7b:38:01:03:ab:2d:a3:99:4d:7b:2a:9c</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">fb:70:ab:e5:e8:45:43:35:2e:c0:db:09:69:66:c3</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">75:09:35:bf:b9:6a:45:aa:8e:95:88:e7:8a:89:8e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">97:7e:89:e6:dc:53:b3:4c:0b:ed:eb:42:78:c4:5f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">c8:fb:26:73:ef:07:98:7e:fb:21:85:4c:50:e7:0f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">25:bf:b4:80:db:92:98:09:2f:7f:94:17:6e:03:c8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">66:ea:ec:9f:f5:18:9c:ff:68:6e:13:5b:1d:cf:fd</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">2d:87:50:90:1e:c2:5f:25:fd:98:f7:b1:9c:33:4e</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token key atrule">ee:98:20:34:0d:a3:a5:b1:1a:ac:b9:99:1a:2e:20</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    ac</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">c9</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">9f</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Exponent</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 65537 (0x10001)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">X509v3 extensions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">X509v3 Basic Constraints</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> critical</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                CA</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token boolean important" style="color:rgb(255, 88, 116)">TRUE</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> pathlen</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">X509v3 Subject Key Identifier</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                F0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">9C</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">85</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">FD</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">A2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">9F</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">7D</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">8F</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">C9</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">68</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">BB</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">D5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">D4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">89</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">4D</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">1D</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">BE</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">D3</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">90</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">FF</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">X509v3 Authority Key Identifier</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                keyid</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">03</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">DE</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">50</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">35</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">56</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">D1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">4C</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">BB</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">66</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">F0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">A3</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">E2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">1B</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">1B</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">C3</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">97</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">B2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">3D</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">D1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token number" style="color:rgb(247, 140, 108)">55</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">X509v3 Key Usage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> critical</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                Digital Signature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> Certificate Sign</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> CRL Sign</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">X509v3 Extended Key Usage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                TLS Web Server Authentication</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> TLS Web Client Authentication</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">Authority Information Access</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                OCSP </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> URI</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">//ocsp.digicert.com</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                CA Issuers </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> URI</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">//cacerts.digicert.com/DigiCertGlobalRootCA.crt</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">X509v3 CRL Distribution Points</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Full Name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                  URI</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">//crl3.digicert.com/DigiCertGlobalRootCA.crl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token key atrule">X509v3 Certificate Policies</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Policy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 2.16.840.1.114412.2.1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Policy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 2.23.140.1.1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Policy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 2.23.140.1.2.1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Policy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 2.23.140.1.2.2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token key atrule">Policy</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 2.23.140.1.2.3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># 签名</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">Signature Algorithm</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> sha256WithRSAEncryption</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">07:e3:87:fb:35:7f:97:43:75:f9:b4:b0:d9:bb:e3:f7:56:31</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">b6:ec:c5:f6:15:d4:ba:13:a4:5b:7e:dc:c4:94:5a:f4:9b:88</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">f4:1f:52:4a:15:e7:b6:f9:ae:eb:51:26:f9:cf:3f:d9:92:96</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">91:70:71:9d:de:d6:74:94:6e:2d:a8:21:31:80:ed:10:8e:8f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">6d:c8:d4:5e:33:93:46:09:9b:8d:aa:03:02:48:a8:e5:5e:9d</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">1d:d7:b7:24:36:55:1f:36:aa:10:ba:c6:c9:71:b4:d7:fb:7f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">63:5d:c7:61:bb:31:e9:b8:c2:91:61:c8:f0:d3:d8:fe:94:27</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">63:27:ac:3f:85:0b:ff:d9:28:7e:7f:11:1a:3d:ea:08:73:f1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">5a:8d:96:62:f9:45:7a:3c:2a:cf:6b:32:bf:c0:77:dc:70:63</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">88:72:46:f0:33:e7:dd:b4:9b:25:1f:7f:07:54:a9:cd:12:bc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">f9:45:9d:a8:6c:66:0d:79:b9:3e:47:90:ae:3c:b4:74:74:4c</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">bb:8b:1f:c6:91:a7:38:78:28:9f:d8:a7:4b:00:44:d6:fe:f6</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">2d:51:e0:58:39:cc:f3:6f:1e:cd:81:6c:8b:de:d2:f9:30:c4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         </span><span class="token key atrule">0c:be:47:8e:f6:ee:a6:33:97:7d:36:ef:0f:63:10:50:ba:1c</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">         c5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">d1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token datetime number" style="color:rgb(247, 140, 108)">68:37</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>证书中主要包含：</p><ul><li>证书颁发机构：用于寻找链中的下一个验证节点</li><li>证书的有效期：比如浏览器要根据这个值来判断证书是否已过期</li><li>证书申请信息：比如浏览器要判断改证书是否可用于当前访问的域名</li><li>公钥：用于后续和服务端通信的秘钥，它是和服务器的私钥是一对的</li><li>签名：用于验证证书内容没有被篡改</li></ul><div class="theme-admonition theme-admonition-tip alert alert--success admonition_WoCw"><div class="admonitionHeading_TMsN"><span class="admonitionIcon_Ibzs"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_vXIg"><p>这个证书是 CA 给我们的，自然这个签名也是 CA 使用它自己的私钥进行加密的，但是这里的公钥是我们服务器的公钥，显然不能用于解密签名。这个签名需要客户端的浏览器或者操作系统里存的CA公钥来解。</p></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2der---distinguished-encoding-rules">2.<strong>DER</strong> - Distinguished Encoding Rules<a href="#2der---distinguished-encoding-rules" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>DER格式只是证书的二进制形式，而不是ASCII PEM格式。它有时会有.der的文件扩展名，但它的文件扩展名通常是.cer所以判断DER .cer文件和PEM .cer文件之间区别的唯一方法是在文本编辑器中打开它并查找BEGIN / END语句。所有类型的证书和私钥都可以用DER格式编码。DER通常与Java平台一起使用，Java 和 Windows 服务器偏向于使用这种编码格式。SSL转换器只能将证书转换为DER格式</p><p>查看 DER 格式证书的信息：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">openssl x509 -in certificate.der -inform der -text -noout</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ssl证书加密原理"><strong>SSL证书加密原理</strong><a href="#ssl证书加密原理" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>第一步：客户端向一个https网站发起请求；</p><p>第二步：服务器将SSL证书发送给客户端校验，证书中含有一个公钥；</p><p>这里需要特别说明一下，客户端到底是如何校验目标网站的SSL证书的。首先，它会在本地电脑上寻找时候有这个SSL证书的CA机构根证书，如果有继续下一步，如果没有，则发出警告。其次，使用CA机构根证书的公钥对该服务器的SSL证书的指纹和指纹算法进行解密，得到指纹算法之后，对服务器证书的摘要进行计算得到指纹。最后，将计算出的指纹和服务器证书解密出的指纹进行对比，如果一样则通过。</p><p>第三步：校验成功后，客户端生成一个随机串，然后使用该网站的SSL证书的公钥进行加密，之后发送给网站服务器；</p><p>第四步：网站服务器使用自己的私钥解密，得到客户端生成的随机串；</p><p>第五步：服务器使用得到的这一随机串，开始与客户端进行对称加密通信；</p><p>第六步：客户端使用随机串对服务器发来的信息进行解密；</p><p>总结就是，ssl证书使用非对称加密来传输对称加密用到的密钥，传输成功后，用得到的密钥进行对称加解密。非对称加解密安全性高，但消耗大，性能差，对称加密性能高，到存在一点安全风险。ssl证书结合使用两种加密，得到了一种安全与性能兼得的解决方案。</p><br><div class="font-montserrat"><span class="font-bold">Tags: </span><div class="inline-flex flex-wrap gap-2"><a class="no-underline" href="/blog/tags/nginx"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">nginx</span></a><a class="no-underline" href="/blog/tags/https"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">https</span></a></div></div>]]></content>
        <author>
            <name>Mill Jiang</name>
            <uri>https://github.com/jzw777</uri>
        </author>
        <category label="nginx" term="nginx"/>
        <category label="https" term="https"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[网关专题]]></title>
        <id>https://jzw777.github.io/blog/gateway</id>
        <link href="https://jzw777.github.io/blog/gateway"/>
        <updated>2023-01-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[工作中前前后后接触并使用过很多类型的网关中间件，简单归纳总结了主流的网关产品]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="简介">简介<a href="#简介" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>​	就像一户人家，不管条件是富有还是贫穷，都一定会有房门，在实际的软件开发工作中一定会使用网关这个类似于房门一样的组件。 喜欢抬扛的人这时候会想到自己经手过的很多小项目并没有使用网关啊，那么如果说Nginx也算是一种网关的话，网关无处不在也就变得很容易被接受了。</p><p>​	网关的“关”，可以理解为“一夫当关，万夫莫开”中的“关”，是天堑，是护城河，守护着公司或者团队中的it产品，及网络环境。网关大致可以分为流量网关和业务网关（也有叫API网关）。</p><div class="centered-image"><img loading="lazy" style="align-self:center" src="https://test.preview.qingxinzhimei.com/2023/01/17/ERP202301170000129507.png" alt="gateway" class="img_ev3q"></div>​ 如图示意，流量网关与业务网关的大概位置，既流量网关部署在业务网关之前，业务网关更多的是与业务系统部署在一起。<h3 class="anchor anchorWithStickyNavbar_LWe7" id="流量网关">流量网关<a href="#流量网关" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	顾名思义，流量网关更多的是关注流量，它的职责一般包括流量监控，限流，黑白名单控制，流量的负载均衡，以及https证书的管理。常见的流量网关主要就是Nginx以及基于它衍生出来的网关</p><ul><li>Kong</li><li>OpenResty</li><li>APISIX</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="业务网关">业务网关<a href="#业务网关" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	在单体项目还是主流的时代，很少有人花时间去建设业务网关，取而代之的是MVC中自定义的各种拦截器，过滤器。随着微服务的普及，单体服务拆分后，会发现有很多功能是共用的，比如权限控制、日志输出、数据加密、熔断限流等。这时建设业务网关来承接这些通用能力变得非常有必要了。用的比较多的网关产品主要就是Zuul，Spring Cloud Gateway，云原生中基于service mesh思想的Istio网关，还有最近刚刚开源的阿里Higress网关。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="产品分析">产品分析<a href="#产品分析" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>​	个人能力及精力十分有限，在此，仅对我在工作中使用过的，有过多一点点研究的网关产品进行展开多聊几句。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="spring-cloud-gateway">Spring Cloud Gateway<a href="#spring-cloud-gateway" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="istio">Istio<a href="#istio" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实际使用">实际使用<a href="#实际使用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><br><div class="font-montserrat"><span class="font-bold">Tags: </span><div class="inline-flex flex-wrap gap-2"><a class="no-underline" href="/blog/tags/gateway"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">gateway</span></a><a class="no-underline" href="/blog/tags/k-8-s"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">k8s</span></a></div></div>]]></content>
        <author>
            <name>Mill Jiang</name>
            <uri>https://github.com/jzw777</uri>
        </author>
        <category label="gateway" term="gateway"/>
        <category label="k8s" term="k8s"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[redis学习笔记]]></title>
        <id>https://jzw777.github.io/blog/redis-learning</id>
        <link href="https://jzw777.github.io/blog/redis-learning"/>
        <updated>2022-12-21T15:28:14.000Z</updated>
        <summary type="html"><![CDATA[Redis(Remote Dictionary Server)，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="redis数据结构">Redis数据结构<a href="#redis数据结构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221193254400.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221193254400.png" alt="image-20221221193254400" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="常用数据结构及命令">常用数据结构及命令<a href="#常用数据结构及命令" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>字符串常用操作</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SET  key  value             //存入字符串键值对</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">MSET  key  value [key value ...]    //批量存储字符串键值对</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SETNX  key  value       //存入一个不存在的字符串键值对</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">GET  key            //获取一个字符串键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">MGET  key  [key ...]        //批量获取字符串键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">DEL  key  [key ...]         //删除一个键</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">EXPIRE  key  seconds        //设置一个键的过期时间(秒)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>原子加减</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">INCR  key           //将key中储存的数字值加1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">DECR  key           //将key中储存的数字值减1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">INCRBY  key  increment      //将key所储存的值加上increment</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">DECRBY  key  decrement  //将key所储存的值减去decrement</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>单值缓存</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SET  key  value     </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">GET  key </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>对象缓存</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1) SET  user:1  value(json格式数据)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">2) MSET  user:1:name  zhuge   user:1:balance  1888</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   MGET  user:1:name   user:1:balance </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>分布式锁</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SETNX  product:10001  true      //返回1代表获取锁成功</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SETNX  product:10001  true      //返回0代表获取锁失败</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">。。。执行业务操作</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">DEL  product:10001          //执行完业务释放锁</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SET product:10001 true  ex  10  nx  //防止程序意外终止导致死锁</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>计数器</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">INCR article:readcount:{文章id}   </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">GET article:readcount:{文章id} </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>分布式系统全局序列号</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">INCRBY  orderId  1000       //redis批量生成序列号提升性能</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hash结构常用操作">Hash结构常用操作<a href="#hash结构常用操作" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HSET  key  field  value             //存储一个哈希表key的键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HSETNX  key  field  value       //存储一个不存在的哈希表key的键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HMSET  key  field  value [field value ...]  //在一个哈希表key中存储多个键值对</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HGET  key  field                //获取哈希表key对应的field键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HMGET  key  field  [field ...]      //批量获取哈希表key中多个field键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HDEL  key  field  [field ...]       //删除哈希表key中的field键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HLEN  key               //返回哈希表key中field的数量</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HGETALL  key                //返回哈希表key中所有的键值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HINCRBY  key  field  increment      //为哈希表key中field键的值加上增量increment</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>对象缓存</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HMSET  user  {userId}:name  zhuge  {userId}:balance  1888</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HMSET  user  1:name  zhuge  1:balance  1888</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">HMGET  user  1:name  1:balance  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221194404031.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221194404031.png" alt="image-20221221194404031" class="img_ev3q"></a></p><ul><li><p>优点</p></li><li><ol><li>同类数据归类整合储存，方便数据管理</li><li>相比string操作消耗内存与cpu更小</li><li>相比string储存更节省空间</li></ol></li><li><p>缺点</p><ol><li>过期功能不能使用在field上，只能用在key上</li><li>1)Redis集群架构下不适合大规模使用</li></ol></li></ul><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221195006963.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221195006963.png" alt="image-20221221195006963" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="list常用操作">List常用操作<a href="#list常用操作" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">LPUSH  key  value [value ...]       //将一个或多个值value插入到key列表的表头(最左边)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">RPUSH  key  value [value ...]       //将一个或多个值value插入到key列表的表尾(最右边)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">LPOP  key           //移除并返回key列表的头元素</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">RPOP  key           //移除并返回key列表的尾元素</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">LRANGE  key  start  stop        //返回列表key中指定区间内的元素，区间以偏移量start和stop指定</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">BLPOP  key  [key ...]  timeout  //从key列表表头弹出一个元素，若列表中没有元素，阻塞等待                  timeout秒,如果timeout=0,一直阻塞等待</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">BRPOP  key  [key ...]  timeout  //从key列表表尾弹出一个元素，若列表中没有元素，阻塞等待                  timeout秒,如果timeout=0,一直阻塞等待</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221195110835.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221195110835.png" alt="image-20221221195110835" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="set常用操作">Set常用操作<a href="#set常用操作" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SADD  key  member  [member ...]         //往集合key中存入元素，元素存在则忽略，</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                            若key不存在则新建</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SREM  key  member  [member ...]         //从集合key中删除元素</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SMEMBERS  key                   //获取集合key中所有元素</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SCARD  key                  //获取集合key的元素个数</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SISMEMBER  key  member          //判断member元素是否存在于集合key中</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SRANDMEMBER  key  [count]           //从集合key中选出count个元素，元素不从key中删除</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SPOP  key  [count]              //从集合key中选出count个元素，元素从key中删除</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Set运算操作</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SINTER  key  [key ...]              //交集运算</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SINTERSTORE  destination  key  [key ..]     //将交集结果存入新集合destination中</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SUNION  key  [key ..]               //并集运算</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SUNIONSTORE  destination  key  [key ...]        //将并集结果存入新集合destination中</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SDIFF  key  [key ...]               //差集运算</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SDIFFSTORE  destination  key  [key ...]     //将差集结果存入新集合destination中</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>应用-微信抽奖小程序</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1）点击参与抽奖加入集合</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SADD key {userlD}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">2）查看参与抽奖所有用户</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SMEMBERS key      </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">3）抽取count名中奖者</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SRANDMEMBER key [count] / SPOP key [count]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1) 点赞</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SADD  like:{消息ID}  {用户ID}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">2) 取消点赞</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SREM like:{消息ID}  {用户ID}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">3) 检查用户是否点过赞</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SISMEMBER  like:{消息ID}  {用户ID}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">4) 获取点赞的用户列表</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SMEMBERS like:{消息ID}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">5) 获取点赞用户数 </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SCARD like:{消息ID}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>集合操作</li></ul><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221195645216.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221195645216.png" alt="image-20221221195645216" class="img_ev3q"></a></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SINTER set1 set2 set3 → { c }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SUNION set1 set2 set3 → { a,b,c,d,e }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SDIFF set1 set2 set3 → { a }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="zset常用操作">ZSet常用操作<a href="#zset常用操作" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZADD key score member [[score member]…] //往有序集合key中加入带分值元素</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZREM key member [member …]      //从有序集合key中删除元素</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZSCORE key member           //返回有序集合key中元素member的分值</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZINCRBY key increment member        //为有序集合key中元素member的分值加上increment </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZCARD key               //返回有序集合key中元素个数</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZRANGE key start stop [WITHSCORES]  //正序获取有序集合key从start下标到stop下标的元素</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZREVRANGE key start stop [WITHSCORES]   //倒序获取有序集合key从start下标到stop下标的元素</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Zset集合操作</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZUNIONSTORE destkey numkeys key [key ...]   //并集计算</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZINTERSTORE destkey numkeys key [key …] //交集计算</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221200005028.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221200005028.png" alt="image-20221221200005028" class="img_ev3q"></a></p><ul><li>应用-Zset集合操作实现排行榜</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1）点击新闻</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZINCRBY  hotNews:20190819  1  守护香港</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">2）展示当日排行前十</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZREVRANGE  hotNews:20190819  0  9  WITHSCORES </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">3）七日搜索榜单计算</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZUNIONSTORE  hotNews:20190813-20190819  7 </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">hotNews:20190813  hotNews:20190814... hotNews:20190819</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">4）展示七日排行前十</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ZREVRANGE hotNews:20190813-20190819  0  9  WITHSCORES</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="redis常讨论的问题">Redis常讨论的问题<a href="#redis常讨论的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ul><li>Redis是单线程吗?</li></ul><p>Redis 的单线程主要是指 Redis 的网络 IO 和键值对读写是由一个线程来完成的，这也是 Redis 对外 提供键值存储服务的主要流程。但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p><ul><li>Redis 单线程为什么还能这么快?</li></ul><p>因为它所有的数据都在内存中，所有的运算都是内存级别的运算，而且单线程避免了多线程的切换性 能损耗问题。正因为 Redis 是单线程，所以要小心使用 Redis 指令，对于那些耗时的指令(比如 keys)，一定要谨慎使用，一不小心就可能会导致 Redis 卡顿。</p><ul><li>Redis 单线程如何处理那么多的并发客户端连接?</li></ul><p>Redis的IO多路复用:redis利用epoll来实现IO多路复用，将连接信息和事件放到队列中，依次放到 文件事件分派器，事件分派器将事件分发给事件处理器。</p><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221200452552.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221221200452552.png" alt="image-20221221200452552" class="img_ev3q"></a></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># 查看redis支持的最大连接数，在redis.conf文件中可修改，# maxclients 10000 </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">127.0.0.1:6379&gt;CONFIG GET maxclients</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">##1) "maxclients"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">##2) "10000"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他高级命令">其他高级命令<a href="#其他高级命令" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Info:查看redis服务运行信息，分为 9 大块，每个块都有非常多的参数，这 9 个块分别是:</p><ol><li>Server 服务器运行的环境参数</li><li>Clients 客户端相关信息</li><li>Memory 服务器运行内存统计数据</li><li>Persistence 持久化信息</li><li>Stats 通用统计数据</li><li>Replication 主从复制相关信息</li><li>CPU CPU 使用情况</li><li>Cluster 集群信息</li><li>KeySpace 键值对统计数量信息</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="redis持久化">Redis持久化<a href="#redis持久化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rdb快照snapshot">RDB快照(snapshot)<a href="#rdb快照snapshot" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在默认情况下， Redis 将内存数据库快照保存在名字为 dump.rdb 的二进制文件中。</p><p>你可以对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动保存一次 数据集。
比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次 数据集:</p><p>#<!-- --> save 60 1000 //关闭RDB只需要将所有的save保存策略注释掉即可</p><p>还可以手动执行命令生成RDB快照，进入redis客户端执行命令save或bgsave可以生成dump.rdb文件，每次命令执行都会将所有redis内存快照到一个新的rdb文件里，并覆盖原有rdb快照文件。</p><ul><li>bgsave的写时复制(COW)机制</li></ul><p>Redis 借助操作系统提供的写时复制技术(Copy-On-Write, COW)，在生成快照的同时，依然可以正常 处理写命令。简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。 bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。此时，如果主线程对这些 数据也都是读操作，那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据，那 么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文 件，而在这个过程中，主线程仍然可以直接修改原来的数据。</p><ul><li>save与bgsave对比:</li></ul><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>是否阻塞redis其它命令</td><td>是</td><td>否(在生成子进程执行调用fork函 数时会有短暂阻塞)</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fork子进程，消耗内存</td></tr></tbody></table><p>配置自动生成rdb文件后台使用的是bgsave方式。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="aofappend-only-file">AOF(append-only file)<a href="#aofappend-only-file" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>快照功能并不是非常耐久(durable): 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方 式: AOF 持久化，将修改的每一条指令记录进文件appendonly.aof中(先写入os cache，每隔一段时间 fsync到磁盘)</p><p>比如执行命令“set zhuge 666”，aof文件里会记录如下数据</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">*3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">set</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$5</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">zhuge 6 $3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">666</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这是一种resp协议格式数据，星号后面的数字代表命令有多少个参数，$号后面的数字代表这个参数有几 个字符 注意，如果执行带过期时间的set命令，aof文件里记录的是并不是执行的原始命令，而是记录key过期的 时间戳</p><p>比如执行“set goudan 888 ex 1000”，对应aof文件里记录如下</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">*3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">set</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$6</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">goudan 6 $3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">888</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">*3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$9</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">PEXPIREAT 11 $6</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">goudan</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$13</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1604249786301</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>你可以通过修改配置文件来打开 AOF 功能:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain"># appendonly yes</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从现在开始， 每当 Redis 执行一个改变数据集的命令时(比如 SET)， 这个命令就会被追加到 AOF 文件的末尾。</p><p>这样的话， 当 Redis 重新启动时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目 的。</p><p>你可以配置 Redis 多久才将数据 fsync 到磁盘一次。有三个选项:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">appendfsync always:每次有新命令追加到 AOF 文件时就执行一次 fsync ，非常慢，也非常安全。 </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">appendfsync everysec:每秒 fsync 一次，足够快，并且在故障时只会丢失 1 秒钟的数据。</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">appendfsync no:从不 fsync ，将数据交给操作系统来处理。更快，也更不安全的选择。</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>推荐(并且也是默认)的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p><ul><li>AOF重写</li></ul><p>AOF文件里可能有太多没用指令，所以AOF会定期根据内存的最新数据生成aof文件 例如，执行了如下几条命令:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">incr readcount</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">(integer)1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">incr readcount</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">(integer)2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">incr readcount</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">(integer)3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">incr readcount</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">(integer)4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">incr readcount</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">(integer)5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>重写后AOF文件里变成</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">*3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">SET</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">readcount 6 $1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如下两个配置可以控制AOF自动重写频率</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># auto‐aof‐rewrite‐min‐size 64mb //aof文件至少要达到64M才会自动重写，文件太小恢复速度本来就 很快，重写的意义不大</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># auto‐aof‐rewrite‐percentage 100 //aof文件自上一次重写后文件大小增长了100%则再次触发重写</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当然AOF还可以手动重写，进入redis客户端执行命令bgrewriteaof重写AOF, 注意，AOF重写redis会fork出一个子进程去做(与bgsave命令类似)，不会对redis正常命令处理有太多 影响</p><p>RDB 和 AOF ，我应该用哪一个?</p><table><thead><tr><th>命令</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>容易丢数据</td><td>根据策略决定</td></tr></tbody></table><p>生产环境可以都启用，redis启动时如果既有rdb文件又有aof文件则优先选择aof文件恢复数据，因为aof 一般来说数据更全一点。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="redis-40-混合持久化">Redis 4.0 混合持久化<a href="#redis-40-混合持久化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重 放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很 长的时间。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。 通过如下配置可以开启混合持久化(必须先开启aof):</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain"># aof‐use‐rdb‐preamble yes</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果开启了混合持久化，AOF在重写时，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将 重写这一刻之前的内存做RDB快照处理，并且将RDB快照内容和增量的AOF修改内存数据的命令存在一 起，都写入新的AOF文件，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改 名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换。</p><p>于是在 Redis 重启的时候，可以先加载 RDB 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，因此重启效率大幅得到提升。</p><p>混合持久化AOF文件结构如下</p><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222101934799.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222101934799.png" alt="image-20221222101934799" class="img_ev3q"></a></p><ul><li>Redis数据备份策略:<ol><li>写crontab定时调度脚本，每小时都copy一份rdb或aof的备份到一个目录中去，仅仅保留最近48 小时的备份</li><li>每天都保留一份当日的数据备份到一个目录中去，可以保留最近1个月的备份</li><li>每次copy备份的时候，都把太旧的备份给删了</li><li>每天晚上将当前机器上的备份复制一份到其他机器上，以防机器损坏</li></ol></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="redis主从架构">Redis主从架构<a href="#redis主从架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102114645.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102114645.png" alt="image-20221222102114645" class="img_ev3q"></a></p><p><strong>redis主从架构搭建，配置从节点步骤:</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1、复制一份redis.conf文件 2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">2、将相关配置修改为如下值:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">port6380</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">pidfile /var/run/redis_6380.pid # 把pid进程号写入pidfile配置的文件</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">logfile"6380.log"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">dir /usr/local/redis‐5.0.3/data/6380 # 指定数据存放目录</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># 需要注释掉bind</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">#bind127.0.0.1(bind绑定的是自己机器网卡的ip，如果有多块网卡可以配多个ip，代表允许客户端通 过机器的哪些网卡ip去访问，内网一般可以不配置bind，注释掉即可)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">3、配置主从复制</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">replicaof192.168.0.606379#从本机6379的redis实例复制数据，Redis5.0之前使用slaveof</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">replica‐read‐only yes # 配置从节点只读</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">4、启动从节点</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">redis‐serverredis.conf</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">5、连接从节点</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">redis‐cli‐p6380</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">6、测试在6379实例上写数据，6380实例是否能及时同步新修改数据</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">7、可以自己再配置一个6381的从节点</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Redis主从工作原理</li></ul><p>如果你为master配置了一个slave，不管这个slave是否是第一次连接上Master，它都会发送一个PSYNC命令给master请求复制数据。 master收到PSYNC命令后，会在后台进行数据持久化通过bgsave生成最新的rdb快照文件，持久化期间，master会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。当持久化进行完 毕以后，master会把这份rdb文件数据集发送给slave，slave会把接收到的数据进行持久化生成rdb，然后 再加载到内存中。然后，master再将之前缓存在内存中的命令发送给slave。 当master与slave之间的连接由于某些原因而断开时，slave能够自动重连Master，如果master收到了多 个slave并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送 给多个并发连接的slave。</p><ul><li>主从复制(全量复制)流程图</li></ul><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102529412.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102529412.png" alt="image-20221222102529412" class="img_ev3q"></a></p><p><strong>数据部分复制</strong></p><p>当master和slave断开重连后，一般都会对整份数据进行复制。但从redis2.8版本开始，redis改用可以支 持部分数据复制的命令PSYNC去master同步数据，slave与master能够在网络连接断开重连后只进行部分 数据复制(断点续传)。</p><p>master会在其内存中创建一个复制数据用的缓存队列，缓存最近一段时间的数据，master和它所有的 slave都维护了复制的数据下标offset和master的进程id，因此，当网络连接断开后，slave会请求master 继续进行未完成的复制，从所记录的数据下标开始。如果master进程id变化了，或者从节点数据下标 offset太旧，已经不在master的缓存队列里了，那么将会进行一次全量数据的复制。</p><ul><li>主从复制(部分复制，断点续传)流程图</li></ul><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102657214.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102657214.png" alt="image-20221222102657214" class="img_ev3q"></a></p><p>如果有很多从节点，为了缓解主从复制风暴(多个从节点同时复制主节点导致主节点压力过大)，可以做如 下架构，让部分从节点与从节点(与主节点同步)同步数据</p><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102728607.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222102728607.png" alt="image-20221222102728607" class="img_ev3q"></a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="jedis连接代码示例">Jedis连接代码示例<a href="#jedis连接代码示例" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li><p>引入相关依赖:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">XML</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&lt;dependency&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  &lt;version&gt;2.9.0&lt;/version&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&lt;/dependency&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>访问代码:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  jedisPoolConfig.setMaxTotal(20);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  jedisPoolConfig.setMaxIdle(10);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  jedisPoolConfig.setMinIdle(5);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  // timeout，这里既是连接超时又是读写超时，从Jedis 2.8开始有区分connectionTimeout和soTimeot的构造函数</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  JedisPool jedisPool = new JedisPool(jedisPoolConfig, "test-hfin.rdb.58dns.org", 50356, 3000, "xxxxxxxx");</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  Jedis jedis;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  //从redis连接池里拿出一个连接执行命令</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  jedis = jedisPool.getResource();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  System.out.println(jedis.set("single", "苟蛋"));</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  System.out.println(jedis.get("single"));</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="redis哨兵高可用架构">Redis哨兵高可用架构<a href="#redis哨兵高可用架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222104848999.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222104848999.png" alt="image-20221222104848999" class="img_ev3q"></a></p><p>sentinel哨兵是特殊的redis服务，不提供读写服务，主要用来监控redis实例节点。</p><p>哨兵架构下client端第一次从哨兵找出redis的主节点，后续就直接访问redis的主节点，不会每次都通过 sentinel代理访问redis的主节点，当redis的主节点发生变化，哨兵会第一时间感知到，并且将新的redis 主节点通知给client端(这里面redis的client端一般都实现了订阅功能，订阅sentinel发布的节点变动消息)</p><ul><li>redis哨兵架构搭建步骤:</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1、复制一份sentinel.conf文件</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">cpsentinel.confsentinel‐26379.conf</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">2、将相关配置修改为如下值:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">port 26379</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">daemonize yes</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">pidfile "/var/run/redis‐sentinel‐26379.pid"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">logfile "26379.log"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">dir "/usr/local/redis‐5.0.3/data"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># sentinel monitor &lt;master‐redis‐name&gt; &lt;master‐redis‐ip&gt; &lt;master‐redis‐port&gt; &lt;quorum&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># quorum是一个数字，指明当有多少个sentinel认为一个master失效时(值一般为:sentinel总数/2+ 1)，master才算真正失效</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinel monitor mymaster 192.168.0.606379 2 #mymaster这个名字随便取，客户端访问时会用 到</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">3、启动sentinel哨兵实例</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">src/redis‐sentinelsentinel‐26379.conf</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">4、查看sentinel的info信息</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">src/redis‐cli ‐p 26379</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">127.0.0.1:26379&gt;info</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">可以看到Sentinel的info里已经识别出了redis的主从</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">5、可以自己再配置两个sentinel，端口26380和26381，注意上述配置文件里的对应数字都要修改</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>sentinel集群都启动完毕后，会将哨兵集群的元数据信息写入所有sentinel的配置文件里去(追加在文件的 最下面)，我们查看下如下配置文件sentinel-26379.conf，如下所示</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐replica mymaster 192.168.0.606380 #代表redis主节点的从节点信息</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐replica mymaster 192.168.0.606381 #代表redis主节点的从节点信息</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐sentinel mymaster 192.168.0.6026380 52d0a5d70c1f90475b4fc03b6ce7c3c569 35760f #代表感知到的其它哨兵节点</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐sentinel mymaster 192.168.0.6026381 e9f530d3882f8043f76ebb8e1686438ba8 bd5ca6 #代表感知到的其它哨兵节点</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当redis主节点如果挂了，哨兵集群会重新选举出新的redis主节点，同时会修改所有sentinel节点配置文件 的集群元数据信息，比如6379的redis如果挂了，假设选举出的新主节点是6380，则sentinel文件里的集 群元数据信息会变成如下所示:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐replica mymaster 192.168.0.606379 #代表主节点的从节点信息</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐replica mymaster 192.168.0.606381 #代表主节点的从节点信息</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐sentinel mymaster 192.168.0.6026380 52d0a5d70c1f90475b4fc03b6ce7c3c569 35760f #代表感知到的其它哨兵节点</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinelknown‐sentinel mymaster 192.168.0.6026381 e9f530d3882f8043f76ebb8e1686438ba8 bd5ca6 #代表感知到的其它哨兵节点</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>同时还会修改sentinel文件里之前配置的mymaster对应的6379端口，改为6380</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">sentinel monitor mymaster 192.168.0.60 6380 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当6379的redis实例再次启动时，哨兵集群根据集群元数据信息就可以将6379端口的redis节点作为从节点 加入集群</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="spring-boot整合redis连接">Spring Boot整合Redis连接<a href="#spring-boot整合redis连接" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ul><li>StringRedisTemplate与RedisTemplate详解</li></ul><p>spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api。在 RedisTemplate中提供了几个常用的接口方法的使用，分别是:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">privateValueOperations&lt;K,V&gt;valueOps; </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">privateHashOperations&lt;K,V&gt;hashOps;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">privateListOperations&lt;K,V&gt;listOps;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">privateSetOperations&lt;K,V&gt;setOps;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">privateZSetOperations&lt;K,V&gt;zSetOps;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>RedisTemplate中定义了对5种数据结构操作</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">redisTemplate.opsForValue();//操作字符串</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">redisTemplate.opsForHash();//操作hash</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">redisTemplate.opsForList();//操作list</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">redisTemplate.opsForSet();//操作set</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">redisTemplate.opsForZSet();//操作有序set</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>StringRedisTemplate继承自RedisTemplate，也一样拥有上面这些操作。</p><p>StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存 的。</p><p>RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p><ul><li>Redis客户端命令对应的RedisTemplate中的方法列表</li></ul><table><thead><tr><th>String类型结构</th><th></th></tr></thead><tbody><tr><td>Redis</td><td>RedisTemplate rt</td></tr><tr><td>set key value</td><td>rt.opsForValue().set(“key”,”value”)</td></tr><tr><td>get key</td><td>rt.opsForValue().get(“key”)</td></tr><tr><td>del key</td><td>rt.delete(“key”)</td></tr><tr><td>strlen key</td><td>rt.opsForValue().size(“key”)</td></tr><tr><td>getset key value</td><td>rt.opsForValue().getAndSet(“key”,”value”)</td></tr><tr><td>getrange key start end</td><td>rt.opsForValue().get(“key”,start,end)</td></tr><tr><td>append key value</td><td>rt.opsForValue().append(“key”,”value”)</td></tr><tr><td>Hash结构</td><td></td></tr><tr><td>hmset key field1 value1 field2 value2…</td><td>rt.opsForHash().putAll(“key”,map) //map是一个集合对象</td></tr><tr><td>hset key field value</td><td>rt.opsForHash().put(“key”,”field”,”value”)</td></tr><tr><td>hexists key field</td><td>rt.opsForHash().hasKey(“key”,”field”)</td></tr><tr><td>hgetall key</td><td>rt.opsForHash().entries(“key”) //返回Map对象</td></tr><tr><td>hvals key</td><td>rt.opsForHash().values(“key”) //返回List对象</td></tr><tr><td>hkeys key</td><td>rt.opsForHash().keys(“key”) //返回List对象</td></tr><tr><td>hmget key field1 field2…</td><td>rt.opsForHash().multiGet(“key”,keyList)</td></tr><tr><td>hsetnx key field value</td><td>rt.opsForHash().putIfAbsent(“key”,”field”,”value”</td></tr><tr><td>hdel key field1 field2</td><td>rt.opsForHash().delete(“key”,”field1”,”field2”)</td></tr><tr><td>hget key field</td><td>rt.opsForHash().get(“key”,”field”)</td></tr><tr><td>List结构</td><td></td></tr><tr><td>lpush list node1 node2 node3…</td><td>rt.opsForList().leftPush(“list”,”node”)</td></tr><tr><td></td><td>rt.opsForList().leftPushAll(“list”,list) //list是集合对象</td></tr><tr><td>rpush list node1 node2 node3…</td><td>rt.opsForList().rightPush(“list”,”node”)</td></tr><tr><td></td><td>rt.opsForList().rightPushAll(“list”,list) //list是集合对象</td></tr><tr><td>lindex key index</td><td>rt.opsForList().index(“list”, index)</td></tr><tr><td>llen key</td><td>rt.opsForList().size(“key”)</td></tr><tr><td>lpop key</td><td>rt.opsForList().leftPop(“key”)</td></tr><tr><td>rpop key</td><td>rt.opsForList().rightPop(“key”)</td></tr><tr><td>lpushx list node</td><td>rt.opsForList().leftPushIfPresent(“list”,”node”)</td></tr><tr><td>rpushx list node</td><td>rt.opsForList().rightPushIfPresent(“list”,”node”)</td></tr><tr><td>lrange list start end</td><td>rt.opsForList().range(“list”,start,end)</td></tr><tr><td>lrem list count value</td><td>rt.opsForList().remove(“list”,count,”value”)</td></tr><tr><td>lset key index value</td><td>rt.opsForList().set(“list”,index,”value”)</td></tr><tr><td>Set结构</td><td></td></tr><tr><td>sadd key member1 member2…</td><td>rt.boundSetOps(“key”).add(“member1”,”member2”,…)</td></tr><tr><td></td><td>rt.opsForSet().add(“key”, set) //set是一个集合对象</td></tr><tr><td>scard key</td><td>rt.opsForSet().size(“key”)</td></tr><tr><td>sidff key1 key2</td><td>rt.opsForSet().difference(“key1”,”key2”) //返回一个集合对象</td></tr><tr><td>sinter key1 key2</td><td>rt.opsForSet().intersect(“key1”,”key2”)//同上</td></tr><tr><td>sunion key1 key2</td><td>rt.opsForSet().union(“key1”,”key2”)//同上</td></tr><tr><td>sdiffstore des key1 key2</td><td>rt.opsForSet().differenceAndStore(“key1”,”key2”,”des”)</td></tr><tr><td>sinter des key1 key2</td><td>rt.opsForSet().intersectAndStore(“key1”,”key2”,”des”)</td></tr><tr><td>sunionstore des key1 key2</td><td>rt.opsForSet().unionAndStore(“key1”,”key2”,”des”)</td></tr><tr><td>sismember key member</td><td>rt.opsForSet().isMember(“key”,”member”)</td></tr><tr><td>smembers key</td><td>rt.opsForSet().members(“key”)</td></tr><tr><td>spop key</td><td>rt.opsForSet().pop(“key”)</td></tr><tr><td>srandmember key count</td><td>rt.opsForSet().randomMember(“key”,count)</td></tr><tr><td>srem key member1 member2…</td><td>rt.opsForSet().remove(“key”,”member1”,”member2”,…)</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="高可用集群模式">高可用集群模式<a href="#高可用集群模式" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在redis3.0以前的版本要实现集群一般是借助哨兵sentinel工具来监控master节点的状态，如果master节点异 常，则会做主从切换，将某一台slave作为master，哨兵的配置略微复杂，并且性能和高可用性等各方面表现 一般，特别是在主从切换的瞬间存在访问瞬断的情况，而且哨兵模式只有一个主节点对外提供服务，没法支持 很高的并发，且单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的 效率</p><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222113452326.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222113452326.png" alt="image-20221222113452326" class="img_ev3q"></a></p><p>redis集群是一个由多个主从节点群组成的分布式服务器群，它具有复制、高可用和分片特性。Redis集群不需 要sentinel哨兵∙也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中 心节点，可水平扩展，据官方文档称可以线性扩展到上万个节点(官方推荐不超过1000个节点)。redis集群的 性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="redis集群原理分析">Redis集群原理分析<a href="#redis集群原理分析" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Redis Cluster 将所有数据划分为 16384 个 slots(槽位)，每个节点负责其中一部分槽位。槽位的信息存储于每 个节点中。</p><p>当 Redis Cluster 的客户端来连接集群时，它也会得到一份集群的槽位配置信息并将其缓存在客户端本地。这 样当客户端要查找某个 key 时，可以直接定位到目标节点。同时因为槽位的信息可能会存在客户端与服务器不 一致的情况，还需要纠正机制来实现槽位信息的校验调整。</p><ul><li>槽位定位算法</li></ul><p>Cluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模 来得到具体槽位。
<code>HASH_SLOT = CRC16(key) mod 16384</code></p><ul><li>跳转重定位</li></ul><p>当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客 户端发送一个特殊的跳转指令携带目标操作的节点地址，告诉客户端去连这个节点去获取数据。客户端收到指 令后除了跳转到正确的节点上去操作，还会同步更新纠正本地的槽位映射表缓存，后续所有 key 将使用新的槽 位映射表。</p><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222113735483.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222113735483.png" alt="image-20221222113735483" class="img_ev3q"></a></p><ul><li>Redis集群节点间的通信机制</li></ul><p>redis cluster节点间采取gossip协议进行通信</p><p>维护集群的元数据(集群节点信息，主从角色，节点数量，各节点共享的数据等)有两种方式:集中式和gossip</p><ul><li>集中式:</li></ul><p>优点在于元数据的更新和读取，时效性非常好，一旦元数据出现变更立即就会更新到集中式的存储中，其他节 点读取的时候立即就可以立即感知到;不足在于所有的元数据的更新压力全部集中在一个地方，可能导致元数 据的存储压力。 很多中间件都会借助zookeeper集中式存储元数据。</p><ul><li>gossip:</li></ul><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222113909341.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222113909341.png" alt="image-20221222113909341" class="img_ev3q"></a></p><p>gossip协议包含多种消息，包括ping，pong，meet，fail等等。</p><ul><li>meet:某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点进行通 信;</li><li>ping:每个节点都会频繁给其他节点发送ping，其中包含自己的状态还有自己维护的集群元数据，互相通过 ping交换元数据(类似自己感知到的集群节点增加和移除，hash slot信息等);</li><li>pong: 对ping和meet消息的返回，包含自己的状态和其他信息，也可以用于信息广播和更新;</li><li>fail: 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了。</li></ul><p>gossip协议的优点在于元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上 去更新，有一定的延时，降低了压力;缺点在于元数据更新有延时可能导致集群的一些操作会有一些滞后。</p><p>gossip通信的10000端口 每个节点都有一个专门用于节点间gossip通信的端口，就是自己提供服务的端口号+10000，比如7001，那么 用于节点间通信的就是17001端口。 每个节点每隔一段时间都会往另外几个节点发送ping消息，同时其他几 点接收到ping消息之后返回pong消息。</p><ul><li>网络抖动</li></ul><p>真实世界的机房网络往往并不是风平浪静的，它们经常会发生各种各样的小问题。比如网络抖动就是非常常见 的一种现象，突然之间部分连接变得不可访问，然后很快又恢复正常。</p><p>为解决这种问题，Redis Cluster 提供了一种选项<code>cluster-­node­-timeout</code>，表示当某个节点持续 timeout 的时间失联时，才可以认定该节点出现故障，需要进行主从切换。如果没有这个选项，网络抖动会导致主从频 繁切换 (数据的重新复制)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="redis集群选举原理分析">Redis集群选举原理分析<a href="#redis集群选举原理分析" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>当slave发现自己的master变为FAIL状态时，便尝试进行Failover，以期成为新的master。由于挂掉的master 可能会有多个slave，从而存在多个slave竞争成为master节点的过程， 其过程如下:</p><ol><li>slave发现自己的master变为FAIL</li><li>将自己记录的集群currentEpoch加1，并广播FAILOVER_AUTH_REQUEST 信息</li><li>其他节点收到该信息，只有master响应，判断请求者的合法性，并发送FAILOVER_AUTH_ACK，对每一个 epoch只发送一次ack</li><li>尝试failover的slave收集master返回的FAILOVER_AUTH_ACK</li><li>slave收到超过半数master的ack后变成新Master(这里解释了集群为什么至少需要三个主节点，如果只有两 个，当其中一个挂了，只剩一个主节点是不能选举成功的)</li><li>slave广播Pong消息通知其他集群节点。</li></ol><p>从节点并不是在主节点一进入 FAIL 状态就马上尝试发起选举，而是有一定延迟，一定的延迟确保我们等待 FAIL状态在集群中传播，slave如果立即尝试选举，其它masters或许尚未意识到FAIL状态，可能会拒绝投票 •延迟计算公式:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">DELAY = 500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>SLAVE_RANK表示此slave已经从master复制数据的总量的rank。Rank越小代表已复制的数据越新。这种方 式下，持有最新数据的slave将会首先发起选举(理论上)。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="集群脑裂数据丢失问题">集群脑裂数据丢失问题<a href="#集群脑裂数据丢失问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>redis集群没有过半机制会有脑裂问题，网络分区导致脑裂后多个主节点对外提供写服务，一旦网络分区恢复， 会将其中一个主节点变为从节点，这时会有大量数据丢失。</p><p>规避方法可以在redis配置里加上参数(这种方法不可能百分百避免数据丢失，参考集群leader选举机制):</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">JAVA</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">min‐replicas‐to‐write 1 //写数据成功最少同步的slave数量，这个数量可以模仿大于半数机制配置，比如 集群总共三个节点可以配置1，加上leader就是2，超过了半数</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意:这个配置在一定程度上会影响集群的可用性，比如slave要是少于1个，这个集群就算leader正常也不能 提供服务了，需要具体场景权衡选择。</p><ul><li>集群是否完整才能对外提供服务</li></ul><p>当redis.conf的配置cluster-require-full-coverage为no时，表示当负责一个插槽的主库下线且没有相应的从 库进行故障恢复时，集群仍然可用，如果为yes则集群不可用。</p><ul><li>Redis集群为什么至少需要三个master节点，并且推荐节点数为奇数?</li></ul><p>因为新master的选举需要大于半数的集群master节点同意才能选举成功，如果只有两个master节点，当其中 一个挂了，是达不到选举新master的条件的。</p><p>奇数个master节点可以在满足选举该条件的基础上节省一个节点，比如三个master节点和四个master节点的 集群相比，大家如果都挂了一个master节点都能选举新master节点，如果都挂了两个master节点都没法选举 新master节点了，所以奇数的master节点更多的是从节省机器资源角度出发说的。</p><ul><li>Redis集群对批量操作命令的支持</li></ul><p>对于类似mset，mget这样的多个key的原生批量操作命令，redis集群只支持所有key落在同一slot的情况，如 果有多个key一定要用mset命令在redis集群上操作，则可以在key的前面加上{XX}，这样参数数据分片hash计 算的只会是大括号里的值，这样能确保不同的key能落到同一slot里去，示例如下:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">mset{user1}:1:name goudan{user1}:1:age18</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>假设name和age计算的hash slot值不一样，但是这条命令在集群下执行，redis只会用大括号里的 user1 做 hash slot计算，所以算出来的slot值肯定相同，最后都能落在同一slot。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="哨兵leader选举流程">哨兵leader选举流程<a href="#哨兵leader选举流程" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>当一个master服务器被某sentinel视为下线状态后，该sentinel会与其他sentinel协商选出sentinel的leader进 行故障转移工作。每个发现master服务器进入下线的sentinel都可以要求其他sentinel选自己为sentinel的 leader，选举是先到先得。同时每个sentinel每次选举都会自增配置纪元(选举周期)，每个纪元中只会选择一 个sentinel的leader。如果所有超过一半的sentinel选举某sentinel作为leader。之后该sentinel进行故障转移 操作，从存活的slave中选举出新的master，这个选举过程跟集群的master选举很类似。 哨兵集群只有一个哨兵节点，redis的主从也能正常运行以及选举master，如果master挂了，那唯一的那个哨 兵节点就是哨兵leader了，可以正常选举新master。不过为了高可用一般都推荐至少部署三个哨兵节点。为什么推荐奇数个哨兵节点原理跟集群奇数个master节点 类似。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="redis-60新特性">redis 6.0新特性<a href="#redis-60新特性" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li>多线程</li><li>Client Side Cache</li><li>Acls</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="多线程">多线程<a href="#多线程" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>redis 6.0 提供了多线程的支持，redis 6 以前的版本，严格来说也是多线程，只不过执行用户 命令的请求时单线程模型，还有一些线程用来执行后台任务， 比如 unlink 删除 大key，rdb持久 化等。</p><p>redis 6.0 提供了多线程的读写IO, 但是最终执行用户命令的线程依然是单线程的，这样，就没有 多线程数据的竞争关系，依然很高效。</p><ul><li>redis 6.0 线程执行模式:</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># 可以通过如下参数配置多线程模型: 如:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">io‐threads 4 # 这里说 有三个IO 线程，还有一个线程是main线程，main线程负责IO读写和 命令执行操作</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>默认情况下，如上配置，有三个IO线程， 这三个IO线程只会执行 IO中的write 操作，也就是说， read 和 命令执行 都由main线程执行。最后多线程将数据写回到客户端。<a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222115015124.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222115015124.png" alt="image-20221222115015124" class="img_ev3q"></a></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># 开启了如下参数:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">io‐threads‐do‐reads yes # 将支持IO线程执行 读写任务。</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222115101641.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222115101641.png" alt="image-20221222115101641" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="client-side-caching">client side caching<a href="#client-side-caching" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>客户端缓存:redis 6 提供了服务端追踪key的变化，客户端缓存数据的特性，这需要客户端实现</p><p><a href="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222115141327.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/lizejiao/img_bed/master/images/image-20221222115141327.png" alt="image-20221222115141327" class="img_ev3q"></a></p><p>执行流程为， 当客户端访问某个key时，服务端将记录key 和 client ，客户端拿到数据后，进行 客户端缓存，这时，当key再次被访问时，key将被直接返回，避免了与redis 服务器的再次交 互，节省服务端资源，当数据被其他请求修改时，服务端将主动通知客户端失效的key，客户端 进行本地失效，下次请求时，重新获取最新数据。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">XML</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&lt;!-- 目前只有lettuce对其进行了支持:--&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&lt;dependency&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  &lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  &lt;artifactId&gt;lettuce‐core&lt;/artifactId&gt; </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  &lt;version&gt;6.0.0.RELEASE&lt;/version&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&lt;/dependency&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="acl">ACL<a href="#acl" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>ACL 是对于命令的访问和执行权限的控制，默认情况下，可以有执行任意的指令，兼容以前版 本</p><p>ACL设置有两种方式:</p><ol><li>命令方式:ACL SETUSER + 具体的权限规则， 通过 ACL SAVE 进行持久化</li><li>对 ACL 配置文件进行编写，并且执行 ACL LOAD 进行加载</li></ol><p>ACL存储有两种方式，但是两种方式不能同时配置，否则直接报错退出进程</p><ol><li>redis 配置文件: redis.conf</li><li>ACL配置文件, 在redis.conf 中通过 aclfile /path 配置acl文件的路径</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">SHELL</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># 命令方式:</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">ACL SETUSER alice # 创建一个 用户名为 alice的用户</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>用如上的命令创建的用户语义为:</p><ol><li>处于 off 状态， 它是被禁用的，不能用auth进行认证</li><li>不能访问任何命令</li><li>不能访问任意的key</li><li>没有密码</li></ol><p>如上用户alice 没有任何意义。</p><br><div class="font-montserrat"><span class="font-bold">Tags: </span><div class="inline-flex flex-wrap gap-2"><a class="no-underline" href="/blog/tags/redis"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">redis</span></a></div></div>]]></content>
        <author>
            <name>李苟蛋</name>
        </author>
        <category label="redis" term="redis"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序]]></title>
        <id>https://jzw777.github.io/blog/basic-sort</id>
        <link href="https://jzw777.github.io/blog/basic-sort"/>
        <updated>2022-11-11T15:28:14.000Z</updated>
        <summary type="html"><![CDATA[排序的使用频次非常高，前人也已经为我们准备好了非常高效的排序工具，但是作为一个程序员，最基本的排序还是有必要掌握的。]]></summary>
        <content type="html"><![CDATA[<p>​	今天简单归纳一下常见的排序算法。排序是一个日常工作中非常容易遇到的一件事，我们会非常简单的通过<code>Arrays.sort(...)</code> 高效的处理好这件事。但是能够掌握基本的排序思路，对个人在遇到其他问题时没准就能有启发性的帮助。</p><table><thead><tr><th>算法</th><th>平均复杂度</th><th>最好复杂度</th><th>最坏复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>Y</td></tr><tr><td>选择</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>N</td></tr><tr><td>插入</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>Y</td></tr><tr><td>快速</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(logn)</td><td>N</td></tr><tr><td>归并</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>Y</td></tr><tr><td>堆排</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>N</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="on2">O(n^2)<a href="#on2" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>​	这个复杂度的排序算法，实际生产中不会使用，找工作的时候，面试官也不会考，但是有必要了解它们的排序思路。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="冒泡排序">冒泡排序<a href="#冒泡排序" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	相邻的两个数比较，将较大的数向后交换，重复这个步骤。直到所有的数有序。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void bubbleSort(int [] arr){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    for (int i = 0; i &lt; arr.length; i++) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      for (int j = 1; j &lt; arr.length - i; j++) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if(arr[j] &lt; arr[j-1]){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          swap(arr[j],arr[j-1]);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="插入排序">插入排序<a href="#插入排序" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	将数组左右看成两部分，左侧上排好序的，右侧是待排序。从第一个未排序位置开始，先负责一个副本，暂存。依次与左边数比，小于左侧的数，左侧的数右移，当不能移动的时候，将暂存的数据放入。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void insertSort(Integer[] arr) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        for (int i = 1; i &lt; arr.length; i++) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            int j = i;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            Integer tmp = arr[i];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            while (j &gt; 0 &amp;&amp; arr[j] &lt; arr[j - 1]) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                arr[j] = arr[j - 1];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                j--;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            arr[j] = tmp;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="选择排序">选择排序<a href="#选择排序" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	遍历数组，找到最小的数与第零个数交换，然后在剩下的数据中找最小的，与第二个数交换。循环下去。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void selectionSort(Integer[] arr) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    for (int i = 0; i &lt;arr.length ; i++) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int pos = i;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        for (int j = i+1; j &lt; arr.length; j++) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            if (arr[pos]&gt;arr[j]){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                pos = j;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        swap(arr[i],arr[pos]);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="onlogn">O(nlogn)<a href="#onlogn" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>​	实际工作中，更多情况下是使用效率更高的这几种排序。在jdk自带的排序算法我们看到如下参数。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">//If the length of an array to be sorted is less than this constant, Quicksort is used </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">//in preference to merge sort.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">private static final int QUICKSORT_THRESHOLD = 286;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>​	jdk 以 286为界，小于这个值使用快速排序，大于这个值使用归并排序。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="快速排序">快速排序<a href="#快速排序" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	快速排序采用分治的思想，随机取一个数，将数组分成三个部分，一个小于的部分，一个数大于等于的部分，一个是该值。 递归重复这个动作，最后每个部分都最多一个值的时候，排序完成。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void quickSort(Integer [] arr){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    sort(arr,0,arr.length-1);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">private void sort(Integer[] arr, int begin, int end){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    if (begin&gt;= end){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int left = begin+1;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int right = end;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    Integer value =  arr[begin];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    while(left&lt; right){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        while (left&lt; right &amp;&amp; arr[left]&lt; value){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            left++;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        while (left&lt; right &amp;&amp; arr[right] &gt;= value){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            right--;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if (left&lt; right){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            int tmp = arr[left];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            arr[left] = arr[right];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            arr[right] = tmp;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            left++;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            right--;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    if (arr[right]&gt;= value) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        arr[begin] = arr[right - 1];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        arr[right - 1] = value;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }else {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        arr[begin] = arr[right];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        arr[right] = value;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    sort(arr,begin,right-1);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    sort(arr,left, end);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="归并排序">归并排序<a href="#归并排序" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	小的有序队列合并成大的有序队列的过程。每两个组成队列，排序。然后合并成4个元素的有序队列，依次合并。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void mergeSort(Integer[] arr){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    sort(arr,0,arr.length-1);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">private void sort(Integer[] arr, int begin, int end){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    if (end-begin&lt;1){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int mid = begin + (end-begin)/2;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    sort(arr,begin,mid);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    sort(arr,mid+1,end);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int left = begin;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int right = mid+1;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int index = begin;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    Integer[] res = new Integer [arr.length] ;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    while (left&lt;=mid &amp;&amp; right&lt;= end) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if (arr[left] &lt; arr[right]) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            res[index++] = arr[left++];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }else {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            res[index++] = arr[right++];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    while (left&lt;=mid){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        res[index++] = arr[left++];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }while (right&lt;= end){</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        res[index++ ] = arr[right++];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    for (int i = begin; i &lt;= end; i++) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        arr[i] = res[i];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="堆排">堆排<a href="#堆排" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	通过不断建堆，然后堆顶与最后的数交换，实现排序。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void heapSort(Integer[] arr) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int len = arr.length;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    //建立堆</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    for (int i = len / 2 - 1; i &gt;= 0; i--) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        siftDown(arr, i, len);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    while (len &gt; 0) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int tmp = arr[len - 1];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        arr[len - 1] = arr[0];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        arr[0] = tmp;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        len--;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        siftDown(arr, 0, len);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">private void siftDown(Integer[] arr, int index, int len) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    int left = index * 2 + 1;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    while (left &lt; len) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int right = left + 1;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        int child = left;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if (right &lt; len &amp;&amp; arr[right] &gt; arr[left]) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            child = right;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        if (arr[index] &gt; arr[child]) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            break;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            int tmp = arr[index];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            arr[index] = arr[child];</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            arr[child] = tmp;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        left = child * 2 + 1;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><br><div class="font-montserrat"><span class="font-bold">Tags: </span><div class="inline-flex flex-wrap gap-2"><a class="no-underline" href="/blog/tags/算法"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">算法</span></a></div></div>]]></content>
        <author>
            <name>Mill Jiang</name>
            <uri>https://github.com/jzw777</uri>
        </author>
        <category label="算法" term="算法"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[maven-resources-plugin]]></title>
        <id>https://jzw777.github.io/blog/maven-resources-plugin</id>
        <link href="https://jzw777.github.io/blog/maven-resources-plugin"/>
        <updated>2022-10-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[项目打包时如果有证书，脚本等文件需要跟项目jar包放在一起，可以使用这个插件]]></summary>
        <content type="html"><![CDATA[<blockquote><p>官网地址：<a href="https://maven.apache.org/plugins/maven-resources-plugin/" target="_blank" rel="noopener noreferrer">https://maven.apache.org/plugins/maven-resources-plugin/</a></p></blockquote><p> ​	Resources Plugin处理项目资源到输出目录的复制。有两种不同的资源：主资源和测试资源。不同之处在于，主资源是与主源代码关联的资源，而测试资源则与测试源代码关联。</p><p>因此，这允许分离主源代码及其单元测试的资源。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="goals">Goals<a href="#goals" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>​	共有三个目标：</p><ul><li>Resources:resources</li></ul><p>​	拷贝main resources到main output directory。它绑定了process-resources生命周期阶段，当执行Compiler:compile插件目标前就会执行此阶段。</p><ul><li>Resources:testResources</li></ul><p>​	拷贝test resources到test output directory。它绑定了process-test-resources生命周期阶段，当执行surefire:test插件目标前就会执行此阶段。</p><ul><li>Resources:copy-resources</li></ul><p>​	手动拷贝资源到输出目录。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用">使用<a href="#使用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="拷贝资源">拷贝资源<a href="#拷贝资源" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>该插件支持将特定位置的资源拷贝到指定路径下。</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">plugin</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">artifactId</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">maven-resources-plugin</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">artifactId</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">version</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">3.3.0</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">version</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">executions</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">execution</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">id</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">copy-resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">id</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- here the phase you need --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">phase</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">validate</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">phase</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">goals</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">goal</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">copy-resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">goal</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">goals</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">configuration</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">outputDirectory</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">${basedir}/target/extra-resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">outputDirectory</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">resource</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">directory</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">src/non-packaged-resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">directory</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">filtering</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">true</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">filtering</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">resource</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">configuration</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">execution</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">executions</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">plugin</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="过滤替换">过滤/替换<a href="#过滤替换" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	在你的resources中包含变量，这些变量以${...}分隔符表示。可以来自系统属性，项目属性，过滤器资源和命令行。</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_WoCw"><div class="admonitionHeading_TMsN"><span class="admonitionIcon_Ibzs"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>备注</div><div class="admonitionContent_vXIg"><p>Springboot 项目做了如下配置<code>&lt;resource.delimiter&gt;@&lt;/resource.delimiter&gt;</code></p><p>需要添加 <code>&lt;resource.delimiter&gt;${}&lt;/resource.delimiter&gt;</code>  改回默认的，否则会发现替换不能生效。</p></div></div><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!--项目属性--&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!-- -Dfoo=bar --&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">project</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!--项目属性--&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">properties</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">your.name</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">world</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">your.name</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">properties</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">build</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">&lt;!--过滤器资源--&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">filters</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">filter</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">[a filter property]</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">filter</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">filters</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">build</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">project</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="包含排除">包含/排除<a href="#包含排除" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>指定资源目录包含的文件/排除的文件</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">build</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">resource</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">directory</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">src/my-resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">directory</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">includes</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">**/*.txt</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">**/*.rtf</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">[resource file #1]</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">[resource file #2]</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">include</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">includes</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">excludes</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">exclude</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">**/*test*.*</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">exclude</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">exclude</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">**/*.pdf</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">exclude</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">exclude</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain">[non-resource file #n]</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">exclude</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">excludes</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">resource</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">resources</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">build</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其他的使用场景可以到官网上看。</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="相关知识点">相关知识点：<a href="#相关知识点" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="maven-生命周期">Maven 生命周期<a href="#maven-生命周期" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>​	maven有三个生命周期，每个周期下又有多个阶段（phase），而目标（goal）是绑定在阶段上的，每一个 phase 都对应 1 个或多个 goal。</p><ul><li><h4 class="anchor anchorWithStickyNavbar_LWe7" id="clean">clean<a href="#clean" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4></li></ul><blockquote><p> <code>pre-clean</code>  ,  <code>clean</code>  ,  <code>post-clean</code></p></blockquote><ul><li><h4 class="anchor anchorWithStickyNavbar_LWe7" id="default">default<a href="#default" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4></li></ul><blockquote><p><code>validate</code>,<code>initialize</code>,<code>generate-sources</code>,<code>process-sources</code>,<code>generate-resources</code>,
<code>	process-resources</code>,<code>compile</code>,<code>process-classes</code>,<code>generate-test-sources</code>,
<code>	process-test-sources</code>,<code>generate-test-resources</code>,<code>process-test-resources</code>,
<code>test-compile</code>,<code>process-test-classes</code>,<code>test,prepare-package</code>,
<code>		package</code> ,<code>pre-integration-test</code>,<code>integration-test</code>,
<code> 	post-integration-test</code>,<code>verify</code>,<code>install</code>,<code>deploy</code></p></blockquote><ul><li><h4 class="anchor anchorWithStickyNavbar_LWe7" id="site">site<a href="#site" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4></li></ul><blockquote><p><code>pre-site</code>,<code>site</code>,<code>post-site</code>,<code>site-deploy</code></p></blockquote><br><div class="font-montserrat"><span class="font-bold">Tags: </span><div class="inline-flex flex-wrap gap-2"><a class="no-underline" href="/blog/tags/java"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">java</span></a><a class="no-underline" href="/blog/tags/maven"><span class="rounded border border-solid border-[#2A2A42] bg-[#F6F6F9] px-2 py-1 text-[10px] capitalize text-[#2A2A42] transition duration-150 hover:border-[#1890FF] hover:text-[#1890FF]">maven</span></a></div></div>]]></content>
        <author>
            <name>Mill Jiang</name>
            <uri>https://github.com/jzw777</uri>
        </author>
        <category label="java" term="java"/>
        <category label="maven" term="maven"/>
    </entry>
</feed>